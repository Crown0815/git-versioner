name: Release Binaries

on:
  push:
    tags:
      - 'v*'

env:
  CLI_NAME: git-versioner

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
            name: linux-x64-glibc,
            os: ubuntu-22.04,
            toolchain: stable,
            target: x86_64-unknown-linux-gnu,
          }
          - {
            name: linux-x64-musl,
            os: ubuntu-22.04,
            toolchain: stable,
            target: x86_64-unknown-linux-musl,
          }
          - {
            name: linux-x86-glibc,
            os: ubuntu-22.04,
            toolchain: stable,
            target: i686-unknown-linux-gnu,
          }
          - {
            name: linux-x86-musl,
            os: ubuntu-22.04,
            toolchain: stable,
            target: i686-unknown-linux-musl,
          }
          - {
            name: linux-arm64-glibc,
            os: ubuntu-22.04,
            toolchain: stable,
            target: aarch64-unknown-linux-gnu,
          }
          - {
            name: linux-arm64-musl,
            os: ubuntu-22.04,
            toolchain: stable,
            target: aarch64-unknown-linux-musl,
          }
          - {
            name: win32-x64-mingw,
            os: windows-2022,
            toolchain: stable,
            target: x86_64-pc-windows-gnu,
          }
          - {
            name: win32-x64-msvc,
            os: windows-2022,
            toolchain: stable,
            target: x86_64-pc-windows-msvc,
          }
          - {
            name: win32-x86-msvc,
            os: windows-2022,
            toolchain: stable,
            target: i686-pc-windows-msvc,
          }
          - {
            name: win32-arm64-msvc,
            os: windows-2022,
            toolchain: stable,
            target: aarch64-pc-windows-msvc,
          }
          - {
            name: darwin-x64,
            os: macos-13,
            toolchain: stable,
            target: x86_64-apple-darwin,
          }
          - {
            name: darwin-arm64,
            os: macos-15,
            toolchain: stable,
            target: aarch64-apple-darwin,
          }
    runs-on: ${{ matrix.build.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install MUSL-libc dependencies (Linux)
        if: endsWith(matrix.build.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends musl-tools

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.build.toolchain }}
          targets: ${{ matrix.build.target }}
          components: rustfmt, clippy

      - name: Check format
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Install libssh2 (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssh2-1-dev libssl-dev pkg-config

      - name: Install libssh2 (macOS)
        if: runner.os == 'macOS'
        run: brew install libssh2

      - name: Install cross (Linux/macOS)
        if: runner.os != 'Windows'
        run: cargo install cross

      - name: Build binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: cross build --release --locked --target ${{ matrix.build.target }}
        env:
          CARGO_TARGET_DIR: target

      - name: Build binary (Windows)
        if: runner.os == 'Windows'
        run: cargo build --release --locked --target ${{ matrix.build.target }}
        env:
          CARGO_TARGET_DIR: target

      - name: Strip binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: strip target/${{ matrix.build.target }}/release/${{ env.CLI_NAME }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.build.target }}
          path: target/${{ matrix.build.target }}/release/${{ env.CLI_NAME }}${{ runner.os == 'Windows' && '.exe' || '' }}
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Rename artifacts for uniqueness
        run: |
          mkdir -p release-artifacts
          for dir in artifacts/*; do
            if [ -d "$dir" ]; then
              target=$(basename "$dir" | sed 's/^binary-//')
              for file in "$dir"/*; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  ext="${filename##*.}"
                  if [ "$ext" = "$filename" ]; then
                    mv "$file" "release-artifacts/${{ env.CLI_NAME }}-${target}"
                  else
                    mv "$file" "release-artifacts/${{ env.CLI_NAME }}-${target}.${ext}"
                  fi
                fi
              done
            fi
          done
        env:
          CLI_NAME: git-versioner

      - name: List release artifacts
        run: ls -l release-artifacts

      - name: Determine prerelease status
        id: prerelease
        run: |
          TAG=${{ github.ref_name }}
          if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            if [[ $TAG =~ - ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Invalid tag format: $TAG"
            exit 1
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-artifacts/*
          draft: true
          prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
